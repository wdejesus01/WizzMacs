#+TITLE:Welcome to the wonderful world of wizadry
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* General Setting
** User-Settings
#+begin_src emacs-lisp
    (setq inhibit-startup-message t) ; Removes starting page

  (tool-bar-mode -1);Determins if tool bar shows up
  (scroll-bar-mode -1)
  (menu-bar-mode 1)

  (global-display-line-numbers-mode 1);Activates number lines
  (setq display-line-numbers-type 'relative);Number lines are relative to the current line

  (recentf-mode 1); loads recent files that you have edited

  (setq history-length 20) ;Sets the amount of recent files tracked

  (save-place-mode 1) ; Saves and restores last location of file

  ;; Moves custom variables to a seprate file and loads it
  ;; custom-file determines where custom variables are stored
  ;; locate-user-emacs-file Resolves path within the init.el directory
  (setq custom-file (locate-user-emacs-file "custom-vars.el"));

  ;; Loads the custom file
  ;; Don't throw errors or put messages in minibuffer if errors occurs
  (load custom-file 'noerror 'nomessage)

  (setq use-dialog-box nil);Turns off graphical dialog box(less mouse clickey)

  (global-auto-revert-mode 1);If file has changed, auto loads changes
  (setq global-auto-revert-non-file-buffers t);;Same as above but for all buffers

  (global-hl-line-mode 1)

  (fset 'yes-or-no-p 'y-or-n-p);Sets yes or no to y or no
  (add-to-list 'image-types 'svg) ; Fixed inavlid type svg for macos
#+end_src
** Package Management Via Straight.el
#+begin_src emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))


  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  
#+end_src
* UI
** Themes
*** Doom Themes
#+begin_src emacs-lisp

  (use-package doom-themes
    :straight t
    :config
     (setq doom-themes-enable-bold t)   ; if nil, bold is universally disabled
     (setq     doom-themes-enable-italic t)) ; if nil, italics is universally disabled
  
#+end_src
*** Tao
#+begin_src emacs-lisp
  (use-package Tao
   :straigt '(Tao :type git :host github :repo "11111000000/tao-theme-emacs"))
#+end_src

#+RESULTS:
: t

#+end_src
*** Load-theme
#+begin_src emacs-lisp
  (load-theme 'doom-dark+ t)
#+end_src
** Nerd-Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
   :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
   (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
#+end_src
** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
  :straight t)(use-package bespoke-modeline
  :straight (:type git :host github :repo "mclear-tools/bespoke-modeline") 
  :init
  ;; Set header line
  (setq bespoke-modeline-position 'top)
  ;; Set mode-line height
  (setq bespoke-modeline-size 3)
  ;; Show diff lines in mode-line
  (setq bespoke-modeline-git-diff-mode-line t)
  ;; Set mode-line cleaner
  (setq bespoke-modeline-cleaner t)
  ;; Use mode-line visual bell
  (setq bespoke-modeline-visual-bell t)
  ;; Set vc symbol
  (setq  bespoke-modeline-vc-symbol "G:")
  :config
 
#+end_src
** Modeline
*** Nano
#+begin_src emacs-lisp
  (use-package doom-modeline
  :straight t
  :init
  (doom-modeline-mode 1))
#+end_src
** Dashboard
#+begin_src emacs-lisp

  (use-package dashboard
  :straight t
  :config
  (setq dashboard-set-file-icons t)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'all-the-icons))
  (dashboard-setup-startup-hook)
 #+end_src

#+RESULTS:
: ts

* Org-Mode
** Org-Config
*** Settings
#+begin_src emacs-lisp
  (setq org-html-validation-link nil)
#+end_src
*** org-packagae
#+begin_src emacs-lisp

(use-package org
  :straight t
  :config
  (org-mode 1))

#+end_src
*** Org-Drawers
#+begin_src emacs-lisp
 (setq org-log-into-drawer t);; Allows notes to be inserted into drawers 
#+End_src
** Appearence
*** Org-Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
  :straight t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
*** org-Settings
#+BEGIN_SRC emacs-lisp
  (setq org-hidden-keywords '(title))
  (setq org-startup-indented t)
  (setq org-startup-inline-images t)
  (setq org-startup-folded t)
#+END_SRC

#+RESULTS:
: t

** Funtionality
*** Evil-org
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
  :straight t
  :after (evil org)
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

#+RESULTS:
: t
*** Org-Tempo
#+BEGIN_SRC emacs-lisp
  (use-package org-tempo
  :straight '(:type built-in))
  (add-to-list 'org-structure-template-alist '("el". "src emacs-lisp"));;Autofill code blocks

#+END_SRC
*** Org-Babel
**** Languages
#+BEGIN_SRC emacs-lisp
  ;;select languages for bable
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)))

  (setq org-confirm-babel-evaluate nil);;Confirmation to execute code block
#+END_SRC 

#+RESULTS:

**** Tangle
#+BEGIN_SRC emacs-lisp
  (defun efs/org-babel-tangle-config()
  (when(string-equal (buffer-file-name)
                     (expand-file-name "~/.emacs.d/WizzyMacs.org"))

  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

 #+END_SRC

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

*** Org-Agenda`
#+begin_src emacs-lisp
  (setq org-log-done t)
  (setq org-agenda-files '("~/Desktop/Org/Task.org"))
  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src
* Key-Bindings
** Evil
#+begin_src emacs-lisp

      (use-package evil
        :straight t
        :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      :config
  (define-key evil-insert-state-map (kbd "C-c") 'evil-normal-state)
        (evil-mode 1))

#+end_src
** Evil-Collections
#+begin_src emacs-lisp
  (use-package evil-collection
  :after evil
  :straight t
  :custom (evil-collection-setup-minibuffer t)
  (setq evil-collection-most-list '(dired))
  :init
  (evil-collection-init))
#+end_src
** Lisp/Elisp
#+begin_src emacs-lisp
  (defun mp-elisp-mode-eval-buffer ()
  (interactive)
  (message "Evaluated buffer")
  (eval-buffer))

(define-key emacs-lisp-mode-map (kbd "C-c C-c") #'mp-elisp-mode-eval-buffer)
(define-key lisp-interaction-mode-map (kbd "C-c C-c") #'mp-elisp-mode-eval-buffer)
#+end_src
** Global

* Completion
** Vertico
#+begin_src emacs-lisp
  
  (use-package vertico
  :straight t
  :config
  (vertico-mode 1))

#+end_src
** Marginalia
#+begin_src emacs-lisp
  
(use-package marginalia
  :after vertico
  :straight t
  :config
  (marginalia-mode 1))

#+end_src
** Savehist
#+begin_src emacs-lisp

  (use-package savehist
  :config
  (savehist-mode))

#+end_src
** Which-Key
#+begin_src emacs-lisp

    (use-package which-key
    :straight t 
    :config
  (which-key-mode))

#+end_src
** Orderless
#+begin_src emacs-lisp
  
(use-package which-key
  :straight t 
  :config
(which-key-mode))

#+end_src
** Flycheck
#+begin_src emacs-lisp
  
  (use-package flycheck
    :straight t)

#+end_src
** Corfu
#+begin_src emacs-lisp

  (use-package corfu
   ;; Optional customizations
  :custom
  (corfu-cyclt)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
   ;; (corfu-separator ?\s)          ;; Orderless field separator
   ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
   ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
   ;; (corfu-preview-current nil)    ;; Disable current candidate preview
   ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
   ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
   ;; (corfu-scroll-margin 5)        ;; Use scroll margin

   ;; Enable Corfu only for certain modes.
   ;; :hook ((prog-mode . corfu-mode)
   ;;        (shell-mode . corfu-mode)
   ;;        (eshell-mode . corfu-mode))

   ;; Recommended: Enable Corfu globally.
   ;; This is recommended since Dabbrev can be used globally (M-/).
   ;; See also `corfu-exclude-modes'.

   :init
   (global-corfu-mode -1)
  (corfu-history-mode))

#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
  :straight t
  :init
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* Programming
** LSP
*** LSP-Mode
#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :straight t
    :config
    (setq lsp-keymap-prefix "C-c l")
    (lsp-enable-which-key-integration t)) 
  #+end_src
  
*** Eglot
#+begin_src emacs-lisp

  (use-package eglot
    :straight t
    :hook
    ((rustic-mode-hook . eglot-ensure)))
 


#+end_src
** Languages
*** Rust
#+begin_src emacs-lisp

  (use-package rustic
  :straight t
  :config
  (setq lsp-rust-analyzer-completion-add-call-parenthesis nil))

#+end_src
*** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
  :straight '( :type built-in))
#+end_src
** Treemacs
#+begin_src emacs-lisp
    (use-package treemacs
    :straight t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :straight t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :straight t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :straight t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :straight t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :straight t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src
