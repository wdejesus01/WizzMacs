#+TITLE:Welcome to the wonderful world of wizadry
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+SEQ_TODO: UPDATE N/A MAINTENANCE
* General Setting
** User-Settings
#+begin_src emacs-lisp
    (setq inhibit-startup-message t) ; Removes starting page

  (tool-bar-mode -1);Determins if tool bar shows up
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  (global-display-line-numbers-mode 1);Activates number lines
  (setq display-line-numbers-type 'relative);Number lines are relative to the current line

  (recentf-mode 1); loads recent files that you have edited

  (setq history-length 20) ;Sets the amount of recent files tracked

  (save-place-mode 1) ; Saves and restores last location of file

  ;; Moves custom variables to a seprate file and loads it
  ;; custom-file determines where custom variables are stored
  ;; locate-user-emacs-file Resolves path within the init.el directory
  (setq custom-file (locate-user-emacs-file "custom-vars.el"));

  ;; Loads the custom file
  ;; Don't throw errors or put messages in minibuffer if errors occurs
  (load custom-file 'noerror 'nomessage)

  (setq use-dialog-box nil);Turns off graphical dialog box(less mouse clickey)

  (global-auto-revert-mode 1);If file has changed, auto loads changes
  (setq global-auto-revert-non-file-buffers t);;Same as above but for all buffers

  (global-hl-line-mode 1)

  (fset 'yes-or-no-p 'y-or-n-p);Sets yes or no to y or no
  (add-to-list 'image-types 'svg) ; Fixed inavlid type svg for macos
  
#+end_src
*** Find Sudo-File
#+begin_src emacs-lisp
(defun sudo-find-file (file-name)
  "Like find file, but opens the file as root."
  (interactive "FSudo Find File: ")
  (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name)))
#+end_src
** Package Management Via Straight.el
#+begin_src emacs-lisp
  
  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))


  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
** No-Littering
#+begin_src emacs-lisp
  (use-package no-littering
  :straight t)
  (no-littering-theme-backups)
#+end_src

** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src

* UI
** Themes
*** Doom Themes
#+begin_src emacs-lisp

  (use-package doom-themes
    :straight t
    :config
     (setq doom-themes-enable-bold t)   ; if nil, bold is universally disabled
     (setq     doom-themes-enable-italic t)) ; if nil, italics is universally disabled
  
#+end_src
*** Tao
#+begin_src emacs-lisp
  (use-package Tao
   :straight '(Tao :type git :host github :repo "11111000000/tao-theme-emacs"))
#+end_src

#+RESULTS:
: t

#+end_src
*** Load-theme
#+begin_src emacs-lisp
  (load-theme 'doom-dark+ t)
#+end_src
** Nerd-Icons
#+begin_src emacs-lisp
          (use-package nerd-icons
          :straight t
        :custom
    (nerd-icons-font-family "3270 Nerd Font")
  )
          ;; The Nerd Font you want to use in GUI
          ;; "Symbols Nerd Font Mono" is the default and is recommended
          ;; but you can use any other Nerd Font if you want
#+end_src
** All The Icons
#+begin_src emacs-lisp
    (use-package all-the-icons
    :straight t)

#+end_src
** Modeline
*** Doom
#+begin_src emacs-lisp
  (use-package doom-modeline
  :straight t
  :init
  )

#+end_src
*** Bespoke
#+begin_src emacs-lisp
  (use-package bespoke-modeline
    :straight (:type git :host github :repo "mclear-tools/bespoke-modeline") 
    :init
    ;; Set header line
    (setq bespoke-modeline-position 'bottom)
    ;; Set mode-line height
    (setq bespoke-modeline-size 3)
    ;; Show diff lines in mode-line
    (setq bespoke-modeline-git-diff-mode-line t)
    ;; Set mode-line cleaner
    (setq bespoke-modeline-cleaner t)
    ;; Use mode-line visual bell
    (setq bespoke-modeline-visual-bell t)
    ;; Set vc symbol
    (setq  bespoke-modeline-vc-symbol "G:")
    (bespoke-modeline-mode))

#+end_src
** Dashboard
#+begin_src emacs-lisp

  (use-package dashboard
  :straight t
  :config
  (setq dashboard-set-file-icons t)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'all-the-icons))
  (dashboard-setup-startup-hook)
 #+end_src

#+RESULTS:
: ts

* Org-Mode
** Org-Config
*** Settings
#+begin_src emacs-lisp
  (setq org-html-validation-link nil)
#+end_src
*** org-packagae
#+begin_src emacs-lisp
(use-package org
  :straight t
  :config
  (org-mode))

#+end_src

#+RESULTS:
: t

*** Org-Drawers
#+begin_src emacs-lisp
 (setq org-log-into-drawer t);; Allows notes to be inserted into drawers 
#+End_src
*** Spell Check
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+end_src
*** TODO
#+begin_src emacs-lisp

  (setq org-enforce-todo-dependencies 1)

  (setq org-todo-keywords
        '((sequence "READING(r)" "REFERENCE(R)" "|" "HIATUS(h)" "DONE(d)") 
          (sequence "TODO" "|" "DONE" "CANCELLED" "POSTPONED")))

  (setq org-todo-keyword-faces
        '(("REFERENCE" . "red")))


#+end_src

#+RESULTS:
: ((REFERENCE . red))

** Appearence
*** Org-Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
  :straight t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
*** org-Settings
#+BEGIN_SRC emacs-lisp
  (setq org-hidden-keywords '(title))
  (setq org-startup-indented t)
  (setq org-startup-inline-images t)
  (setq org-startup-folded t)
#+END_SRC

#+RESULTS:
: t

** Funtionality
*** Org-Tempo
#+BEGIN_SRC emacs-lisp
  (use-package org-tempo
  :straight '(:type built-in))
  (add-to-list 'org-structure-template-alist '("el". "src emacs-lisp"));;Autofill code blocks

#+END_SRC
*** Org-Babel
**** Languages
#+BEGIN_SRC emacs-lisp
    ;;select languages for bable
    (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
  (C . t)))


    (setq org-confirm-babel-evaluate nil);;Confirmation to execute code block
#+END_SRC 

#+RESULTS:

**** Tangle
#+BEGIN_SRC emacs-lisp
  (defun efs/org-babel-tangle-config()
  (when(string-equal (buffer-file-name)
                     (expand-file-name "~/.emacs.d/WizzyMacs.org"))

  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

 #+END_SRC

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

*** Org-Agenda`
#+begin_src emacs-lisp
  (setq org-log-done t)
  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src
* Key-Bindings
** Evil
#+begin_src emacs-lisp


  (use-package evil
    :straight t
    :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (define-key evil-insert-state-map (kbd "C-c") 'evil-normal-state)
  (evil-mode 1))

#+end_src

 #+RESULTS:
 : t
** Evil-Collection
#+begin_src emacs-lisp
  (use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init ))
#+end_src
** Evil-Initialization
#+begin_src emacs-lisp
  (evil-set-initial-state 'Info-mode 'emacs)


#+end_src

** God-mode
#+begin_src emacs-lisp
  (use-package god-mode
  :straight t
  (god-mode))
#+end_src

** Lisp/Elisp
#+begin_src emacs-lisp
  (defun mp-elisp-mode-eval-buffer ()
  (interactive)
  (message "Evaluated buffer")
  (eval-buffer))

(define-key emacs-lisp-mode-map (kbd "C-c C-c") #'mp-elisp-mode-eval-buffer)
(define-key lisp-interaction-mode-map (kbd "C-c C-c") #'mp-elisp-mode-eval-buffer)
#+end_src

* Completion
** Vertico
#+begin_src emacs-lisp
  
  (use-package vertico
  :straight t
  :config
  (vertico-mode 1))

#+end_src
** Marginalia
#+begin_src emacs-lisp
  
(use-package marginalia
  :after vertico
  :straight t
  :config
  (marginalia-mode 1))

#+end_src
** Savehist
#+begin_src emacs-lisp

  (use-package savehist
  :config
  (savehist-mode))

#+end_src
** Which-Key
#+begin_src emacs-lisp

    (use-package which-key
    :straight t 
    :config
  (which-key-mode))

#+end_src
** Orderless
#+begin_src emacs-lisp
  (use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src
** Flycheck
#+begin_src emacs-lisp

  (use-package flycheck
    :straight t)
  (global-flycheck-mode)


#+end_src
** Corfu
#+begin_src emacs-lisp

  (use-package corfu
   ;; Optional customizations
  :custom
  (corfu-cyclt)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
   ;; (corfu-separator ?\s)          ;; Orderless field separator
   ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
   ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
   ;; (corfu-preview-current nil)    ;; Disable current candidate preview
   ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
   ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
   ;; (corfu-scroll-margin 5)        ;; Use scroll margin

   ;; Enable Corfu only for certain modes.
   ;; :hook ((prog-mode . corfu-mode)
   ;;        (shell-mode . corfu-mode)
   ;;        (eshell-mode . corfu-mode))

   ;; Recommended: Enable Corfu globally.
   ;; This is recommended since Dabbrev can be used globally (M-/).
   ;; See also `corfu-exclude-modes'.

   :init
   (global-corfu-mode -1)
  (corfu-history-mode))

#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
  :straight t
  :hook
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* Programming
** LSP
*** Eglot
#+begin_src emacs-lisp
    (require 'eglot)
      #+end_src

      #+RESULTS:
      : eglot
      
** Languages
*** Rust
#+begin_src emacs-lisp

  (use-package rustic
    :straight t
    :config
    (setq lsp-rust-analyzer-completion-add-call-parenthesis nil)
    (setq rustic-lsp-client 'eglot))


#+end_src

#+RESULTS:
: t

*** Shell Scripting
**** Shfmt
#+begin_src emacs-lisp
  (use-package shfmt
  :straight t)
  (add-hook 'sh-mode-hook 'shfmt-on-save-mode)
#+end_src

** Treemacs
#+begin_src emacs-lisp
    (use-package treemacs
    :straight t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :straight t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :straight t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :straight t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :straight t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :straight t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src
* Applications
** EPUB
#+begin_src emacs-lisp
  (use-package nov.el
    :straight t)
  (use-package nov
    :straight t)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

#+RESULTS:
: ((\.epub\' . nov-mode) (/git-rebase-todo\' . git-rebase-mode) (\.rs\' . rustic-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.cs\' . csharp-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (\.eld\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|sls\|sld\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . js-json-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|EPUB\|CBZ\|FB2\|O?XPS\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|epub\|cbz\|fb2\|o?xps\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.mailmap\' . conf-unix-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))
** Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :straight t)
#+end_src
