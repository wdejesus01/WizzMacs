:#+STARTUP: overview
#+TITLE:Welcome to the wonderful world of wizardry
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+SEQ_TODO: UPDATE N/A MAINTENANCE
* General Setting
** User-Settings
#+begin_src emacs-lisp
      (setq inhibit-startup-message t) ; Removes starting page

    (tool-bar-mode nil) ; if tool bar shows up
    (scroll-bar-mode nil)
    (menu-bar-mode nil)

    (global-display-line-numbers-mode 1);Activates number lines
    (setq display-line-numbers-type 'relative);Number lines are relative to the current line

    (recentf-mode 1); loads recent files that you have edited

    (setq history-length 20) ;Sets the amount of recent files tracked

    (save-place-mode 1) ; Saves and restores last location of file

    ;; Moves custom variables to a seprate file and loads it
    ;; custom-file determines where custom variables are stored
    ;; locate-user-emacs-file Resolves path within the init.el directory
    (setq custom-file (locate-user-emacs-file "custom-vars.el"));

    ;; Loads the custom file
    ;; Don't throw errors or put messages in minibuffer if errors occurs
    (load custom-file 'noerror 'nomessage)

    (setq use-dialog-box nil);Turns off graphical dialog box(less mouse clickey)

    (global-auto-revert-mode 1);If file has changed, auto loads changes
    (setq global-auto-revert-non-file-buffers t);;Same as above but for all buffers

    (global-hl-line-mode 1)

    (fset 'yes-or-no-p 'y-or-n-p);Sets yes or no to y or no
    (add-to-list 'image-types 'svg) ; Fixed inavlid type svg for macos

    (add-to-list 'default-frame-alist '(undecorated . t))
#+end_src
*** Find Sudo-File
#+begin_src emacs-lisp
(defun sudo-find-file (file-name)
  "Like find file, but opens the file as root."
  (interactive "FSudo Find File: ")
  (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name)))
#+end_src
** Straight.el
#+begin_src emacs-lisp
  
  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))


  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
** No-Littering
#+begin_src emacs-lisp
  (use-package no-littering
  :straight t)
  (no-littering-theme-backups)
#+end_src
** Frames
#+begin_src emacs-lisp
  (keymap-global-set "C-x 5 w" 'set-frame-width)
  (keymap-global-set "C-x 5 h" 'set-frame-height)
#+end_src
** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src
** Buffers
#+begin_src emacs-lisp
  (keymap-global-set "C-x C-b" 'buffer-menu)
  (add-to-list 'global-auto-revert-ignore-modes 'Buffer-menu-mode)
#+end_src

#+RESULTS:
| Buffer-menu-mode |
** Registers
*** Bookmarks
#+begin_src emacs-lisp
  ;; Save bookmark list after every modifiction
  (setq bookmark-save-flag 1)
#+end_src

#+RESULTS:
: 1

* UI
** Themes
*** Doom Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :straight t
    :config
    (setq doom-themes-enable-bold t   ; if nil, bold is universally disabled
  	doom-themes-enable-italic t)
    (load-theme 'doom-henna t)) ; if nil, italics is universally disabled


#+end_src

#+RESULTS:
: t

** Nerd-Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :straight t
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;;   (nerd-icons-font-family "Symbols Nerd Font Mono")
    )
#+end_src
** All The Icons
#+begin_src emacs-lisp
    (use-package all-the-icons
    :straight t)

#+end_src
** Dashboard
#+begin_src emacs-lisp

  (use-package dashboard
  :straight t
  :config
  (setq dashboard-set-file-icons t)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'all-the-icons))
  (dashboard-setup-startup-hook)
 #+end_src

#+RESULTS:
: ts

* Documents
** Org-Mode
*** Org-Config
**** org-packagae
#+begin_src emacs-lisp
(use-package org
  :straight t
  :config
  (org-mode))

#+end_src

#+RESULTS:
: t

**** Settings
#+begin_src emacs-lisp
    (setq org-html-validation-link nil)
    (setq org-hide-emphasis-markers t)
    (setq org-clock-sound "~/android.webm")
  (defun my/play-sound (orgin-fn sound)
    (cl-destructuring-bind (_ _ file) sound
      (make-process :name (concat "play-sound-" file)
                    :connection-type 'pipe
                    :command `("mpv" ,file))))
  (advice-add 'play-sound :around 'my/play-sound)
#+end_src

#+RESULTS:

**** Org-Drawers
#+begin_src emacs-lisp
 (setq org-log-into-drawer t);; Allows notes to be inserted into drawers 
#+End_src
**** Spell Check
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+end_src
**** TODO
#+begin_src emacs-lisp

  (setq org-enforce-todo-dependencies 1)

  (setq org-todo-keywords
        '((sequence  "|" "HIATUS(h)" "READ(d@)") 
          (sequence "TODO" "|" "DONE" "CANCELLED" "POSTPONED")))

#+end_src

#+RESULTS:
: ((REFERENCE . red))

*** Appearence
**** Org-Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
  :straight t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
**** org-Settings
#+BEGIN_SRC emacs-lisp
  (setq org-hidden-keywords '(title))
  (setq org-startup-indented t)
  (setq org-startup-inline-images t)
  (setq org-startup-folded t)
#+END_SRC

#+RESULTS:
: t

*** Funtionality
**** Org-Tempo
#+BEGIN_SRC emacs-lisp
  (use-package org-tempo
  :straight '(:type built-in))
  (add-to-list 'org-structure-template-alist '("el". "src emacs-lisp"));;Autofill code blocks

#+END_SRC
**** Org-Babel
***** Languages
#+BEGIN_SRC emacs-lisp
      ;;select languages for bable
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (C . t)
       (python . t)))
       


    (setq org-confirm-babel-evaluate nil);;Confirmation to execute code block
    (setq org-babel-python--command "python3")
  
#+END_SRC 

#+RESULTS:

***** Tangle
#+BEGIN_SRC emacs-lisp
  (defun efs/org-babel-tangle-config()
  (when(string-equal (buffer-file-name)
                     (expand-file-name "~/.emacs.d/WizzyMacs.org"))

  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

 #+END_SRC

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

**** Org-Agenda`
#+begin_src emacs-lisp
  (setq org-log-done t)
  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

**** Org-Pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :straight t
    :bind (("C-c C-x k" . org-pomodoro))
    :config
    (defun long-time ()
      "Pomodoro timing for the home"
      (interactive)
      (setq org-pomodoro-length 50
  	  org-pomdoro-short-break-length 10
  	  org-pomodoro-long-break-length 30
  	  org-pomdoro-long-break-frequency 2))
    (defun short-time ()
      "Pomodoro for short time"
      (interactive)
      (setq oorg-pomodoro-length 25
  	  org-pomdoro-short-break-length 5
  	  org-pomodoro-long-break-length 30
  	  org-pomdoro-long-break-frequency 4)))
#+end_src

#+RESULTS:
: org-pomodoro

** Latex
*** Auctex 
#+begin_src emacs-lisp
  (use-package auctex
  :straight t)
#+end_src
* Key-Bindings
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t
  	evil-want-keybinding nil)
    :config
    (setq	evil-undo-system 'undo-redo)
    (keymap-set evil-insert-state-map "C-c" 'evil-normal-state)
    (evil-mode 1))

#+end_src

 #+RESULTS:
 : t
** Evil-Collection
#+begin_src emacs-lisp
  (use-package evil-collection
  :after evil
  :straight t
  :config
  (evil-collection-init ))
#+end_src

#+RESULTS:
: t

** Lisp/Elisp
#+begin_src emacs-lisp
  
    (defun mp-elisp-mode-eval-buffer ()
    (interactive)
    (message "Evaluated buffer")
    (eval-buffer))

  (define-key emacs-lisp-mode-map (kbd "C-c C-c") #'mp-elisp-mode-eval-buffer)
  (define-key lisp-interaction-mode-map (kbd "C-c C-c") #'mp-elisp-mode-eval-buffer)
#+end_src
* Completion
** Vertico
#+begin_src emacs-lisp
  
  (use-package vertico
  :straight t
  :config
  (vertico-mode 1))

#+end_src
** Marginalia
#+begin_src emacs-lisp
  
(use-package marginalia
  :after vertico
  :straight t
  :config
  (marginalia-mode 1))

#+end_src
** Savehist
#+begin_src emacs-lisp
  (use-package savehist
  :config
  (savehist-mode))
#+end_src
** Which-Key
#+begin_src emacs-lisp
    (use-package which-key
    :straight t 
    :config
  (which-key-mode))
#+end_src
** Orderless
#+begin_src emacs-lisp
  (use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t)
  (global-flycheck-mode)
#+end_src
** Corfu
#+begin_src emacs-lisp

  (use-package corfu
   ;; Optional customizations
  :custom
  (corfu-cyclt)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
   ;; (corfu-separator ?\s)          ;; Orderless field separator
   ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
   ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
   ;; (corfu-preview-current nil)    ;; Disable current candidate preview
   ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
   ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
   ;; (corfu-scroll-margin 5)        ;; Use scroll margin

   ;; Enable Corfu only for certain modes.
   ;; :hook ((prog-mode . corfu-mode)
   ;;        (shell-mode . corfu-mode)
   ;;        (eshell-mode . corfu-mode))

   ;; Recommended: Enable Corfu globally.
   ;; This is recommended since Dabbrev can be used globally (M-/).
   ;; See also `corfu-exclude-modes'.

   :init
   (global-corfu-mode -1)
  (corfu-history-mode))

#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
  :straight t
  :hook
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* Programming
** LSP
*** Eglot
#+begin_src emacs-lisp
    (require 'eglot)
      #+end_src

      #+RESULTS:
      : eglot
      
** Languages
*** Rust
#+begin_src emacs-lisp

  (use-package rustic
    :straight t
    :config
    (setq lsp-rust-analyzer-completion-add-call-parenthesis nil)
    (setq rustic-lsp-client 'eglot))


#+end_src

#+RESULTS:
: t

*** Shell Scripting
**** Shfmt
#+begin_src emacs-lisp
  (use-package shfmt
  :straight t)
  (add-hook 'sh-mode-hook 'shfmt-on-save-mode)
#+end_src

** Treemacs
#+begin_src emacs-lisp
    (use-package treemacs
    :straight t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :straight t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :straight t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :straight t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :straight t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :straight t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src
* Applications
** Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :straight t)
#+end_src
